from datetime import datetime
import telebot
from django.contrib.auth import get_user_model
from telebot import types

from config import BOT_TOKEN, TG_ID
from orders.models import Order
from catalog.models import Product

User = get_user_model()

TOKEN = BOT_TOKEN
ADMIN_CHAT_ID = TG_ID

WORKING_HOURS = (9, 24)
bot = telebot.TeleBot(TOKEN)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ user_state[user_id] = { 'user': User –∏–ª–∏ None, 'step': ..., –∏ –ø—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ }
user_state = {}

def is_working_hours():
    now = datetime.now()
    return WORKING_HOURS[0] <= now.hour < WORKING_HOURS[1]

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    if user_id in user_state:
        del user_state[user_id]
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üå∏ Flower Delivery!\n"
                          "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order.\n"
                          "–î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    user_state[user_id] = 'help'
    bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã, –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —ç—Ç–æ –∞–¥–º–∏–Ω—É.\n"
                          "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /start.")

@bot.message_handler(commands=['order'])
def take_order(message):
    user_id = message.from_user.id
    if user_id in user_state and user_state[user_id] == 'help':
        del user_state[user_id]

    if not is_working_hours():
        bot.reply_to(message, "‚ùå –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å 9:00 –¥–æ 20:00.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–Ω–∞–µ–º –ª–∏ –º—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
    if user_id not in user_state or not isinstance(user_state[user_id], dict) or 'user' not in user_state[user_id]:
        user_state[user_id] = {'step': 'ask_email'}
        bot.reply_to(message, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ:")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –±—É–∫–µ—Ç–∞
        msg = bot.reply_to(message, "üåπ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
        user_state[user_id]['step'] = 'bouquet_name'
        bot.register_next_step_handler(msg, process_bouquet_name)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def fallback_handler(message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'help'
    if user_id in user_state and user_state[user_id] == 'help':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É –∞–¥–º–∏–Ω—É
        bot.send_message(ADMIN_CHAT_ID, f"‚ùó *–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}*\n\n{text}", parse_mode="Markdown")
        bot.reply_to(message, "‚úÖ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π!")
        del user_state[user_id]
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞
    if user_id in user_state and isinstance(user_state[user_id], dict):
        state = user_state[user_id]
        step = state.get('step')

        if step == 'ask_email':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª email, –ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π
            email = text
            user = User.objects.filter(email__iexact=email).first()
            if not user:
                bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
                # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del user_state[user_id]
            else:
                state['user'] = user
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –±—É–∫–µ—Ç–∞
                bot.reply_to(message, "üåπ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
                state['step'] = 'bouquet_name'

        elif step == 'bouquet_name':
            bouquet_name = text
            product = Product.objects.filter(name__iexact=bouquet_name).first()
            if not product:
                bot.reply_to(message, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ç–∞–∫–æ–≥–æ –±—É–∫–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ç–∞–ª–æ–≥.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ —Å–Ω–æ–≤–∞:")
                return
            state['bouquet_name'] = bouquet_name
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            bot.reply_to(message, "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
            state['step'] = 'delivery_address'

        elif step == 'delivery_address':
            state['delivery_address'] = text
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–∫—Ä—ã—Ç–∫—É
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            bot.reply_to(message, "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É?", reply_markup=markup)
            state['step'] = 'add_card_question'

        elif step == 'add_card_question':
            if text.lower() == '–¥–∞':
                state['add_card'] = True
                bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
                state['step'] = 'card_text'
            else:
                state['add_card'] = False
                state['card_text'] = ""
                # –û—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                create_order_and_finish(message, state)

        elif step == 'card_text':
            state['card_text'] = text
            # –ü–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            create_order_and_finish(message, state)

        else:
            # –®–∞–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, fallback
            bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                  "/start - –Ω–∞—á–∞—Ç—å\n"
                                  "/help - –ø–æ–º–æ—â—å\n"
                                  "/order - –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ help –∏–ª–∏ order
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                              "/start - –Ω–∞—á–∞—Ç—å\n"
                              "/help - –ø–æ–º–æ—â—å\n"
                              "/order - –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")

def create_order_and_finish(message, state):
    user = state['user']
    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞, —É–∫–∞–∑—ã–≤–∞–µ–º source='telegram'
    order = Order.objects.create(
        user=user,
        delivery_address=state['delivery_address'],
        add_card=state.get('add_card', False),
        card_text=state.get('card_text', ''),
        source='telegram'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ "telegram"
    )

    order_text = (f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É*\n\n"
                  f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: {user.username} ({user.email})\n"
                  f"üåπ *–ë—É–∫–µ—Ç*: {state['bouquet_name']}\n"
                  f"üìç *–ê–¥—Ä–µ—Å*: {state['delivery_address']}\n"
                  f"–û—Ç–∫—Ä—ã—Ç–∫–∞: {'–î–∞' if order.add_card else '–ù–µ—Ç'}\n"
                  f"–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏: {order.card_text or '–ë–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∫–∏'}\n"
                  f"üïí *–í—Ä–µ–º—è*: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    bot.send_message(ADMIN_CHAT_ID, order_text, parse_mode="Markdown")
    bot.reply_to(message, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä! üå∏")

    user_id = message.from_user.id
    if user_id in user_state:
        del user_state[user_id]

def start_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    bot.polling()


# –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ manage.py),
# –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É:
# if __name__ == "__main__":
#     start_bot()
#
# –ù–æ –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ manage.py runbot,
# –º–æ–∂–Ω–æ —ç—Ç–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é.